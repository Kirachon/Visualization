version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15.4-alpine
    container_name: bi-platform-postgres
    environment:
      POSTGRES_DB: bi_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bi-platform-network

  # Redis Cache
  redis:
    image: redis:7.2.1-alpine
    container_name: bi-platform-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - bi-platform-network

  # Keycloak Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5
    container_name: bi-platform-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: password
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: true
    command: start-dev
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bi-platform-network

  # Backend API
  api:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: bi-platform-api
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:password@postgres:5432/bi_platform
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      KEYCLOAK_URL: http://keycloak:8080/auth
      KEYCLOAK_REALM: bi-platform
      KEYCLOAK_CLIENT_ID: api-service
      TENANT_ID: default
      LOG_LEVEL: debug
      CORS_ORIGIN: http://localhost:3000
    ports:
      - '3001:3001'
    volumes:
      - ../../apps/api/src:/app/apps/api/src
      - ../../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bi-platform-network

  # Frontend Web
  web:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.web
    container_name: bi-platform-web
    environment:
      VITE_API_URL: http://localhost:8000/api/v1
    ports:
      - '3000:80'
    depends_on:
      - api
    networks:
      - bi-platform-network

  # Kong API Gateway
  kong-database:
    image: postgres:15.4-alpine
    container_name: bi-platform-kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U kong']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bi-platform-network

  kong-migration:
    image: kong:3.4.0-alpine
    container_name: bi-platform-kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - bi-platform-network

  kong:
    image: kong:3.4.0-alpine
    container_name: bi-platform-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - '8000:8000'  # Proxy
      - '8443:8443'  # Proxy SSL
      - '8001:8001'  # Admin API
      - '8002:8002'  # Admin GUI
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    healthcheck:
      test: ['CMD', 'kong', 'health']
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - bi-platform-network

volumes:
  postgres_data:
  redis_data:
  kong_data:

networks:
  bi-platform-network:
    driver: bridge

